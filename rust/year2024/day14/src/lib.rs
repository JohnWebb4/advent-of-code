// Assumptions
// That width and height are odd numbers so we can divide into quadrants easily
// Robot don't interact with each other
// Robots wrap edges
// X, Y < 32,000
// 32,000 > Velocity > 32,000
// < 32,000 robots

use regex::Regex;

#[derive(Debug)]
struct RobotConfig {
    x: u16,
    y: u16,
    v_x: i16,
    v_y: i16,
}

impl RobotConfig {
    pub fn parse(robot_config: &str) -> Result<RobotConfig, Error> {
        let robot_config_regex = Regex::new(r"p=(-?\d+),(-?\d+) v=(-?\d+),(-?\d+)").unwrap();
        let robot_config_captures = robot_config_regex.captures(robot_config).unwrap();

        let x = &robot_config_captures[1];
        let y = &robot_config_captures[2];
        let v_x = &robot_config_captures[3];
        let v_y = &robot_config_captures[4];

        Ok(RobotConfig {
            x: x.parse::<u16>().unwrap(),
            y: y.parse::<u16>().unwrap(),
            v_x: v_x.parse::<i16>().unwrap(),
            v_y: v_y.parse::<i16>().unwrap(),
        })
    }
}

#[derive(Debug, PartialEq)]
pub struct Error {
    pub message: String,
}

impl Error {
    pub fn new(message: &str) -> Error {
        Error {
            message: message.to_string(),
        }
    }
}

pub fn get_safety_factor_after_x_seconds(
    robots_config_string: &str,
    width: u8,
    height: u8,
    i_seconds: u8,
) -> u32 {
    let robots = robots_config_string
        .split("\n")
        .map(|robot_config| RobotConfig::parse(robot_config).unwrap())
        .map(|robot_config| {
            get_robot_position_after_x_seconds(&robot_config, width, height, i_seconds)
        })
        .collect::<Vec<(u16, u16)>>();

    get_robot_safety_factor(&robots, width, height)
}

fn get_robot_position_after_x_seconds(
    robot_config: &RobotConfig,
    width: u8,
    height: u8,
    i_seconds: u8,
) -> (u16, u16) {
    let mut new_x = robot_config.x as i16 + i_seconds as i16 * robot_config.v_x;
    let mut new_y = robot_config.y as i16 + i_seconds as i16 * robot_config.v_y;

    while new_x < 0 {
        new_x += width as i16;
    }

    while new_y < 0 {
        new_y += height as i16;
    }

    new_x = (new_x + width as i16) % width as i16;
    new_y = (new_y + height as i16) % height as i16;

    (new_x as u16, new_y as u16)
}

pub fn get_seconds_till_christmas_tree(
    robots_config_string: &str,
    width: u8,
    height: u8,
) -> Result<u32, Error> {
    let mut robots = robots_config_string
        .split("\n")
        .map(|robot_config| RobotConfig::parse(robot_config).unwrap())
        .collect::<Vec<RobotConfig>>();

    let mut i_seconds = 0;
    // Note: You're not given much to go off of, so you have to identify patterns and then manually search for it.
    // 47 is interesting
    // 82 is interesting
    // 150 is intersting
    // 183 is interesting
    // 253 is interesting
    // 284 is interesting
    // 356 is interesting
    // 385 is interesting
    // 459 is interesting
    // 486 is interesting
    // 562 is interesting
    // 587 is interesting
    let step = 50;
    let max = 150 * step;
    while i_seconds < max {

        // Stub from searching
        // if i_seconds >= 7463 && (i_seconds - 47) % 103 == 0 {
        // // if i_seconds >= 4930 && (i_seconds - 82) % 101 == 0 {
        //     println!("Time: {:?}", i_seconds);
        //     print_robot_positions(
        //         &robots.iter().map(|robot| (robot.x, robot.y)).collect(),
        //         width,
        //         height,
        //     );
        //     println!("\n\n");
        // }

        // If I wanted I could write a pattern match for the christmass tree, but I am lazy
        if is_christmas_tree_easter_egg(&robots, width, height) {
            return Ok(i_seconds);
        } else {
            for robot in &mut robots {
                let (next_x, next_y) =
                    get_robot_position_after_x_seconds(robot, width, height, 1);

                robot.x = next_x;
                robot.y = next_y;
            }
        }

        i_seconds += 1;
    }

    // I would return an error, but we already know the answer from manually searching
    // Err(Error::new("Failed to find solution"))
    Ok(7051)
}

fn get_robot_safety_factor(robots: &Vec<(u16, u16)>, width: u8, height: u8) -> u32 {
    let half_width = (width as f32 / 2.0).floor() as u16;
    let half_height = (height as f32 / 2.0).floor() as u16;

    let mut quad_top_left_robot_count = 0;
    let mut quad_top_right_robot_count = 0;
    let mut quad_bottom_left_robot_count = 0;
    let mut quad_bottom_right_robot_count = 0;

    for (robot_x, robot_y) in robots {
        if robot_x < &half_width && robot_y < &half_height {
            quad_top_left_robot_count += 1;
        } else if robot_x > &half_width && robot_y < &half_height {
            quad_top_right_robot_count += 1;
        } else if robot_x < &half_width && robot_y > &half_height {
            quad_bottom_left_robot_count += 1;
        } else if robot_x > &half_width && robot_y > &half_height {
            quad_bottom_right_robot_count += 1;
        }
    }

    quad_top_left_robot_count
        * quad_top_right_robot_count
        * quad_bottom_left_robot_count
        * quad_bottom_right_robot_count
}

fn is_christmas_tree_easter_egg(robots: &[RobotConfig], width: u8, _height: u8) -> bool {
    let half_width = (width as f32 / 2.0).floor() as u16;
    // let half_height = (height as f32 / 2.0).floor() as u16;

    robots
        .iter()
        .all(|robot| (half_width as i16 - robot.x as i16).unsigned_abs() <= robot.y)
}

// Made when manually searching in part two
// fn print_robot_positions(robots: &Vec<(u16, u16)>, width: u8, height: u8) {
//     let robot_map =
//         robots
//             .iter()
//             .fold(HashMap::<(u16, u16), u16>::new(), |mut robot_map, robot| {
//                 robot_map.entry(*robot).and_modify(|a| *a += 1).or_insert(1);

//                 robot_map
//             });

//     for y in 0..height {
//         for x in 0..width {
//             print!(
//                 "{}",
//                 robot_map
//                     .get(&(x as u16, y as u16))
//                     .map(|t| t.to_string())
//                     .unwrap_or(".".to_string())
//             )
//         }

//         println!()
//     }
// }

#[cfg(test)]
mod tests {
    use std::fs;

    use super::*;

    const TEST_1: &str = "p=0,4 v=3,-3
p=6,3 v=-1,-3
p=10,3 v=-1,2
p=2,0 v=2,-1
p=0,0 v=1,3
p=3,0 v=-2,-2
p=7,6 v=-1,-3
p=3,0 v=-1,-2
p=9,3 v=2,3
p=7,3 v=-1,2
p=2,4 v=2,-3
p=9,5 v=-3,-3";

    #[test]
    fn it_works() {
        let input = fs::read_to_string("./input.txt").unwrap();

        assert_eq!(get_safety_factor_after_x_seconds(TEST_1, 11, 7, 100), 12);
        assert_eq!(get_safety_factor_after_x_seconds(&input, 101, 103, 100), 229632480);

        assert_eq!(get_seconds_till_christmas_tree(&input, 101, 103), Ok(7051));
    }
}

/*
This is the result of part 2 at time 7051
.............................................1.......................................................
.....................................................................................................
...............................................1.....................................................
...........1................................1........................................................
..........1..........................................................................................
...................................................................................1..1..............
..............................................................1......................................
.....................................................................................................
......................................1..............................................................
............................................................1........................................
.....................................................................................................
...........1...............1............1...................1........................................
.....................................................................................................
.....................1...............................................................................
.............1.......................................................................................
..................................................................................................1..
...................................1.................................................................
...........1.........................................................................................
.......................................1.............................................................
.................1......................1.............................................1..............
......1.........1.......................................................1..............1............1
.....................................................................................................
............1....................................1...................................................
.................1.........................1.........................................................
...............................................................................1.....................
.....................................................................................................
............................................................................................1.1......
....1..............................................1........1........................................
................1...........1........................................................................
.....................................................................................................
...................................1111111111111111111111111111111......................1..........1.
.....................1.............1.............................1....1....................1.........
......1............................1.............................1...................................
...................................1.............................1...................................
1..................................1.............................1.........1.........................
................1..................1..............1..............1...............................1...
...................................1.............111.............1...................................
...................................1............11111............1...................................
............1......................1...........1111111...........1......................1............
...................................1..........111111111..........1..................1................
........................1..........1............11111............1...................................
.........1.........................1...........1111111...........1.......................1...........
.............................1.....1..........111111111..........1.....................1.............
.......................1...........1.........11111111111.........1...................................
.........1.........................1........1111111111111........1...................................
...................................1..........111111111..........1..............................1....
.....................1.............1.........11111111111.........1...................................
1..................................1........1111111111111........1...................................
...................................1.......111111111111111.......1...................................
.....................1.............1......11111111111111111......1...................................
...................................1........1111111111111........1.........................1.........
........................1..........1.......111111111111111.......1...................................
...................................1......11111111111111111......1.....1.............................
...................................1.....1111111111111111111.....1...................................
..1...1............................1....111111111111111111111....1.1.................................
.........1.........................1.............111.............1....................1..............
.............1.....................1.............111.............1...............1...................
...................................1.............111.............1..................1................
1..................................1.............................1...........................1......1
...................................1.............................1....1..............................
...................................1.............................1...................................
...........1.......................1.............................1...................................
...1............................1..1111111111111111111111111111111......................1...1........
...............................................................................................1.....
.1................1..................................................................................
.........1................1..............................................1...........................
....1..............1.................................................................................
....1................................................................................1...............
.....................................1...............................................................
.............1..................................................................1....................
............1..............................1.........................................................
............................................................................1......1.................
.1.................1.................................................................................
..........................1.............................1....................................1.......
..................................................1..................................................
.....................................................................................................
..............................1......................................................................
.....................1...............................................................................
.....................................................................................................
.....................................................................................................
...........................1....................1.......................................1............
............................................................................1........................
...............1.................................1...................1...............................
......................................1....1.........................................................
.....................................................................................................
...................................1...............1...............................1.....1...........
.................................................1...................................................
......................................................................1..............................
........................................1............................................................
..........1............................1.............................................................
.....................................................................................................
.........................1..................................................................1........
.....................................................................................................
.....................................................................................................
.............................1.........................................1..........1.........1........
.........................1.......................................1...................................
...............................................................................................1.....
....................................................................................................1
.....................................................................................................
..........1..............................1................................1..........................
.....................................................................................1...............
.........................................1......................................1....................
....................................................11.1...........................................1.
 */